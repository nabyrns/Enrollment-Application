using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace Enrollment_Application
{
    /// <summary>
    /// Interaction logic for CreateAccountPage.xaml
    /// </summary>
    public partial class CreateAccountPage : Window
    {
        EnrollmentDBEntities _db = new EnrollmentDBEntities();

        public CreateAccountPage()
        {
            InitializeComponent();
        }
        #region Code executes when CreateAccBtn is clicked
        private void CreateAccBtn_Click(object sender, RoutedEventArgs e)
        {

            #region This code should be replaced with data validation as was implemented elsewhere in the application
            if (EmailText.Text.Equals("") || EmailText.Text.Equals(null))
            {
                MessageBox.Show("You must enter an email and password to login/create an account.");
                return;
            }

            else if (PasswordText.Equals("") || PasswordText.Equals(null))
            {
                MessageBox.Show("You must enter an email and password to login/create an account.");
                return;
            }

            #endregion

            // declare temporary variables to compare the password fields immediately
            string pw = PasswordText.ToString();
            string confirmPW = ConfirmPasswordText.ToString();

            // checks the database to see if a user with the provided email already exists
            var loginInfo = (from m in _db.HighSchoolLogins where m.email.ToLower().Equals(EmailText.Text.ToLower()) select m).FirstOrDefault();
            var loginInfoTwo = (from m in _db.AdultLogins where m.email.ToLower().Equals(EmailText.Text.ToLower()) select m).FirstOrDefault();


            // compares the passwords and displays error message if they do not match
            if (pw != confirmPW)
            {
                MessageBox.Show("Passwords do not match.");

                return;
            }

            // creates a string to contain the salt value created by the CreateSalt method
            // also creates a byte array to stored the salted hash generated by the GenerateSaltedHash method, both of these values will be stored in the database
            String salt = CreateSalt(20);
            byte[] hashedPassword = GenerateSaltedHash(Encoding.UTF8.GetBytes(PasswordText.Password), Encoding.UTF8.GetBytes(salt));

            // if the user was not found in the database, create the user
            if (loginInfo == null && loginInfoTwo == null)
            {
                // code executes if the student type was set to adult
                // this code creates a new login and adds it to the database, while also creating an instance of each of the corresponding student type tables with values to be filled in later
                if (studentTypeBox.Text == "Adult")
                {
                    AdultLogin newLogin = new AdultLogin()
                    {
                        email = EmailText.Text,
                        passwordHash = Convert.ToBase64String(hashedPassword),
                        passwordSalt = salt,
                        dateCreated = DateTime.Now
                    };

                    AdultBasicInfo newBI = new AdultBasicInfo();

                    AdultEmergencyContact ECnew = new AdultEmergencyContact();

                    AdultHealthInfo HInew = new AdultHealthInfo();

                    _db.AdultBasicInfoes.Add(newBI);
                    _db.AdultEmergencyContacts.Add(ECnew);
                    _db.AdultHealthInfoes.Add(HInew);

                    _db.AdultLogins.Add(newLogin);

                    // changes to the database are saved and the create account page is closed
                    _db.SaveChanges();

                    this.Close();
                }

                // same as code above, except it executes if the student type was set to high school
                else if (studentTypeBox.Text == "High School")
                {
                    HighSchoolLogin newLogin = new HighSchoolLogin()
                    {
                        email = EmailText.Text,
                        passwordHash = Convert.ToBase64String(hashedPassword),
                        passwordSalt = salt,
                        dateCreated = DateTime.Now
                    };

                    HighSchoolBasicInfo newBI = new HighSchoolBasicInfo();

                    HighSchoolEmergencyContact ECnew = new HighSchoolEmergencyContact();

                    HighSchoolHealthInfo HInew = new HighSchoolHealthInfo();

                    _db.HighSchoolBasicInfoes.Add(newBI);
                    _db.HighSchoolEmergencyContacts.Add(ECnew);
                    _db.HighSchoolHealthInfoes.Add(HInew);

                    _db.HighSchoolLogins.Add(newLogin);
                    _db.SaveChanges();

                    this.Close();
                }

                // if there was no student type selected, displays error
                // this can also be replaced by validation
                else
                {
                    MessageBox.Show("Please select a student type.");
                    return;
                }
            }

            // if the email was found in one of the tables, error message displays
            else
            {
                MessageBox.Show("Account already exists with that email.");
            }
        }
        #endregion

        #region Code executes when CloseBtn is clicked
        private void CloseBtn_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }
        #endregion

        #region Method that generates new salt to be used in storing of the password
        public String CreateSalt(int size)
        {
            var rng = new System.Security.Cryptography.RNGCryptoServiceProvider();
            var buff = new byte[size];

            rng.GetBytes(buff);

            return Convert.ToBase64String(buff);
        }
        #endregion


        #region Method that generates salted hash of the password to be stored in the database
        static byte[] GenerateSaltedHash(byte[] plainText, byte[] salt)
        {
            HashAlgorithm algorithm = new SHA256Managed();

            byte[] plainTextWithSaltBytes =
              new byte[plainText.Length + salt.Length];

            for (int i = 0; i < plainText.Length; i++)
            {
                plainTextWithSaltBytes[i] = plainText[i];
            }
            for (int i = 0; i < salt.Length; i++)
            {
                plainTextWithSaltBytes[plainText.Length + i] = salt[i];
            }

            return algorithm.ComputeHash(plainTextWithSaltBytes);
        }
        #endregion
    }
}
