using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace Enrollment_Application
{
    public partial class CreateAccountPage : Window
    {
        EnrollmentDBEntities _db = new EnrollmentDBEntities();

        CreateAccountTextValidation validCheck = new CreateAccountTextValidation();

        public CreateAccountPage()
        {
            InitializeComponent();

            textFields.DataContext = validCheck;
        }

        #region Code executes when CreateAccBtn is clicked
        private void CreateAccBtn_Click(object sender, RoutedEventArgs e)
        {
            string passPattern = @"^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]{8,}$";

            Regex reg = new Regex(passPattern);

            if (string.IsNullOrWhiteSpace(PasswordText.Password))
            {
                MessageBox.Show("Password field must not be empty.");
                return;
            }

            else if (!reg.IsMatch(PasswordText.Password))
            {
                MessageBox.Show("Must be at least 8 characters, with: letter, number, special character.");
                return;
            }

            // compares the passwords and displays error message if they do not match
            if (PasswordText.Password != ConfirmPasswordText.Password)
            {
                MessageBox.Show("Passwords do not match.");

                return;
            }

            if (validCheck.IsValid)
            {
                // creates a string to contain the salt value created by the CreateSalt method
                // also creates a byte array to stored the salted hash generated by the GenerateSaltedHash method, both of these values will be stored in the database
                String salt = CommonMethods.CreateSalt(20);
                byte[] hashedPassword = CommonMethods.GenerateSaltedHash(Encoding.UTF8.GetBytes(PasswordText.Password), Encoding.UTF8.GetBytes(salt));

                // code executes if the student type was set to adult
                // this code creates a new login and adds it to the database, while also creating an instance of each of the corresponding student type tables with values to be filled in later
                if (studentTypeBox.Text == "Adult")
                {
                    AdultLogin newLogin = new AdultLogin()
                    {
                        email = EmailText.Text,
                        passwordHash = Convert.ToBase64String(hashedPassword),
                        passwordSalt = salt,
                        dateCreated = DateTime.Now
                    };

                    AdultBasicInfo newBI = new AdultBasicInfo();

                    AdultEmergencyContact ECnew = new AdultEmergencyContact();

                    AdultHealthInfo HInew = new AdultHealthInfo();

                    _db.AdultBasicInfoes.Add(newBI);
                    _db.AdultEmergencyContacts.Add(ECnew);
                    _db.AdultHealthInfoes.Add(HInew);

                    _db.AdultLogins.Add(newLogin);

                    // changes to the database are saved and the create account page is closed
                    _db.SaveChanges();

                    this.Close();
                }

                // same as code above, except it executes if the student type was set to high school
                else
                {
                    HighSchoolLogin newLogin = new HighSchoolLogin()
                    {
                        email = EmailText.Text,
                        passwordHash = Convert.ToBase64String(hashedPassword),
                        passwordSalt = salt,
                        dateCreated = DateTime.Now
                    };

                    HighSchoolBasicInfo newBI = new HighSchoolBasicInfo();

                    HighSchoolEmergencyContact ECnew = new HighSchoolEmergencyContact();

                    HighSchoolHealthInfo HInew = new HighSchoolHealthInfo();

                    _db.HighSchoolBasicInfoes.Add(newBI);
                    _db.HighSchoolEmergencyContacts.Add(ECnew);
                    _db.HighSchoolHealthInfoes.Add(HInew);

                    _db.HighSchoolLogins.Add(newLogin);
                    _db.SaveChanges();

                    this.Close();
                }
            }

            
        }
        #endregion

        #region Code executes when CloseBtn is clicked
        private void CloseBtn_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }
        #endregion
    }
}
